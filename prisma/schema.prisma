// AOT CoDaily - Daily Programming Challenge Platform
// Prisma Schema for Next.js + TypeScript + PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// User model for Discord OAuth integration
model User {
  id            String    @id @default(cuid())
  discordId     String    @unique
  username      String
  discriminator String?
  avatar        String?
  email         String? @unique
  emailVerified DateTime?
  image         String?
  name          String?
  joinedAt      DateTime  @default(now())
  lastSeen      DateTime?
  currentStreak Int       @default(0)
  longestStreak Int       @default(0)
  streakLastSuccess DateTime?
  roles         Json      @default("[]")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // NextAuth relations
  accounts Account[]
  sessions Session[]
  
  // App relations
  submissions   Submission[]
  streakEvents  StreakEvent[]
  leaderboards  Leaderboard[]
  
  @@map("users")
}

// Daily programming problems
model Problem {
  id                String   @id @default(cuid())
  title             String
  description       String   @db.Text
  difficulty        Difficulty
  topic             String?
  inputFormat       String?  @db.Text
  outputFormat      String?  @db.Text
  constraints       String?  @db.Text
  scheduledDate     DateTime? // Date when problem should be published
  publishedAt       DateTime?
  createdBy         String?
  openaiGenerated   Boolean  @default(false)
  metadata          Json     @default("{}")
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  submissions       Submission[]
  testCases         TestCase[]
  
  @@map("problems")
}

// Test cases for problems
model TestCase {
  id          String     @id @default(cuid())
  problemId   String
  type        TestType
  input       String     @db.Text
  output      String     @db.Text
  isHidden    Boolean    @default(false)
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  
  // Relations
  problem     Problem    @relation(fields: [problemId], references: [id], onDelete: Cascade)
  
  @@map("test_cases")
}

// User code submissions
model Submission {
  id          String            @id @default(cuid())
  userId      String
  problemId   String
  language    String
  code        String            @db.Text
  output      String?           @db.Text
  result      SubmissionResult  @default(PENDING)
  score       Float?
  runtimeMs   Int?
  memoryKb    Int?
  submittedAt DateTime          @default(now())
  
  // Relations
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem     Problem           @relation(fields: [problemId], references: [id], onDelete: Cascade)
  
  @@map("submissions")
}

// Streak tracking events
model StreakEvent {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  success   Boolean
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("streak_events")
}

// Leaderboard entries
model Leaderboard {
  id        String   @id @default(cuid())
  userId    String
  type      LeaderboardType
  period    String   // "daily", "weekly", "monthly", "all-time"
  rank      Int
  score     Int
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, type, period])
  @@map("leaderboards")
}

// Enums
enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SubmissionResult {
  PENDING
  ACCEPTED
  WRONG_ANSWER
  ERROR
  TIME_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}

enum LeaderboardType {
  DAILY
  WEEKLY
  MONTHLY
  ALL_TIME
}

enum TestType {
  SAMPLE
  HIDDEN
}
